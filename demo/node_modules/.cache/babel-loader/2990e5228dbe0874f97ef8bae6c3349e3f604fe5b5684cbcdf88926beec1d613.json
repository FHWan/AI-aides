{"ast":null,"code":"//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\n\nexport default {\n  //需要引入：\n  data() {\n    return {\n      userQuestion: '',\n      // 存储用户输入的问题\n      aiResponse: '',\n      // 存储AI返回的回复\n      ws: null // 存储WebSocket实例\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      //ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,\n      //是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0 //透明度\n    });\n\n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n  },\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise(resolve => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n    initWebSocket() {\n      return new Promise(resolve => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n        this.ws = new WebSocket('ws://localhost:4600/question');\n\n        // 新增消息监听\n        this.ws.addEventListener('message', event => {\n          const response = JSON.parse(event.data);\n\n          // 自动滚动到底部\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n\n            // 只有当用户没有手动上滚时才自动滚动\n            const isScrolledToBottom = textarea.scrollHeight - textarea.clientHeight > textarea.scrollTop + 1;\n            if (isScrolledToBottom) {\n              textarea.scrollTop = textarea.scrollHeight;\n            }\n          });\n        });\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', error => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n\n        // ...其他事件监听保持原样...\n      });\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","model","data","userQuestion","aiResponse","ws","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","stage","addChild","x","y","scale","set","methods","sendQuestion","e","preventDefault","trim","readyState","WebSocket","CLOSED","initWebSocket","CONNECTING","Promise","resolve","addEventListener","OPEN","send","console","error","close","event","response","JSON","parse","$nextTick","textarea","$el","querySelector","isScrolledToBottom","scrollHeight","clientHeight","scrollTop","log"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport {Live2DModel} from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\n \nexport default {\n//需要引入：\n  data() {\n    return {\n      userQuestion: '', // 存储用户输入的问题\n      aiResponse: '',   // 存储AI返回的回复\n      ws: null // 存储WebSocket实例\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,//ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,            //是否开启自动播放\n      resizeTo: window,           \n      backgroundAlpha: 0,  //透明度\n    });\n \n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n  },\n\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n        \n        // 新增消息监听\n        this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          \n          // 自动滚动到底部\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            \n            // 只有当用户没有手动上滚时才自动滚动\n            const isScrolledToBottom = textarea.scrollHeight - textarea.clientHeight > textarea.scrollTop + 1\n            if (isScrolledToBottom) {\n              textarea.scrollTop = textarea.scrollHeight;\n            }\n          });\n        });\n        \n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n        \n        // ...其他事件监听保持原样...\n      });\n    }\n  }\n}\n</script>\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 用户输入框 -->\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <!-- AI响应展示 -->\n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n\n  </div>\n</template>\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边http://your-api-endpoint.com/ask框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 4%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 400px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}