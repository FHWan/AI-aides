{"ast":null,"code":"//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\n\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\nlet ws; // 用于 WebSocket 连接\n\nexport default {\n  //需要引入：\n  data() {\n    return {\n      userQuestion: '',\n      // 存储用户输入的问题\n      aiResponse: '' // 存储AI返回的回复\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      //ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,\n      //是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0 //透明度\n    });\n\n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n\n    // 初始化 WebSocket 连接\n    ws = new WebSocket('ws://localhost:4600/question'); // 连接到后端 WebSocket 服务\n\n    ws.onopen = () => {\n      console.log('WebSocket 连接已打开');\n    };\n    ws.onmessage = event => {\n      const response = JSON.parse(event.data);\n      if (response.isEnd) {\n        this.aiResponse += '\\n' + response.data;\n      } else {\n        this.aiResponse += response.data;\n      }\n    };\n    ws.onerror = error => {\n      console.error('WebSocket 错误: ', error);\n    };\n    ws.onclose = () => {\n      console.log('WebSocket 连接已关闭');\n    };\n  },\n  beforeUnmount() {\n    if (ws) {\n      ws.close(); // 组件卸载时关闭 WebSocket 连接\n    }\n    model?.destroy();\n    app?.destroy();\n  },\n  methods: {\n    askQuestion() {\n      if (this.userQuestion.trim()) {\n        // 发送用户输入的问题到后端\n        ws.send(this.userQuestion);\n        this.userQuestion = ''; // 清空用户输入框\n      }\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","model","ws","data","userQuestion","aiResponse","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","stage","addChild","x","y","scale","set","WebSocket","onopen","console","log","onmessage","event","response","JSON","parse","isEnd","onerror","error","onclose","beforeUnmount","close","destroy","methods","askQuestion","trim","send"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport {Live2DModel} from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\n\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\nlet ws; // 用于 WebSocket 连接\n\nexport default {\n//需要引入：\n  data() {\n    return {\n      userQuestion: '', // 存储用户输入的问题\n      aiResponse: '',   // 存储AI返回的回复\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,//ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,            //是否开启自动播放\n      resizeTo: window,           \n      backgroundAlpha: 0,  //透明度\n    });\n \n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n\n    // 初始化 WebSocket 连接\n    ws = new WebSocket('ws://localhost:4600/question'); // 连接到后端 WebSocket 服务\n\n    ws.onopen = () => {\n      console.log('WebSocket 连接已打开');\n    };\n\n    ws.onmessage = (event) => {\n      const response = JSON.parse(event.data);\n      if (response.isEnd) {\n        this.aiResponse += '\\n' + response.data;\n      } else {\n        this.aiResponse += response.data;\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket 错误: ', error);\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket 连接已关闭');\n    };\n  },\n  \n  beforeUnmount() {\n    if (ws) {\n      ws.close(); // 组件卸载时关闭 WebSocket 连接\n    }\n    model?.destroy();\n    app?.destroy();\n  },\n  \n  methods: {\n    askQuestion() {\n      if (this.userQuestion.trim()) {\n        // 发送用户输入的问题到后端\n        ws.send(this.userQuestion);\n        this.userQuestion = ''; // 清空用户输入框\n      }\n    },\n  },\n}\n</script>\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 添加一个文本输入框，用于用户输入问题 -->\n    <textarea class=\"transparent-textarea\" v-model=\"userQuestion\" placeholder=\"请输入文本...\" @keydown.enter=\"askQuestion\"></textarea>\n\n    <!-- 添加一个文本框用于显示AI的回复 -->\n    <textarea class=\"response-textarea\" v-model=\"aiResponse\" placeholder=\"AI的回复...\" readonly></textarea>\n\n  </div>\n</template>\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边http://your-api-endpoint.com/ask框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 8%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 20%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>\n"],"mappings":"AACA;AACA,OAAO,KAAKA,IAAG,MAAO,SAAS;AAC/B,SAAQC,WAAW,QAAO,6BAA6B;AACvDC,MAAM,CAACF,IAAG,GAAIA,IAAI,EAAE;;AAEpB,IAAIG,GAAG,EAAE;AACT,IAAIC,KAAK,EAAE;AACX,IAAIC,EAAE,EAAE;;AAER,eAAe;EACf;EACEC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAAE;MAClBC,UAAU,EAAE,EAAE,CAAI;IACpB,CAAC;EACH,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IACdN,GAAE,GAAI,IAAIH,IAAI,CAACU,WAAW,CAAC;MACzBC,IAAI,EAAE,IAAI,CAACC,KAAK,CAACC,UAAU;MAAC;MAC5BC,SAAS,EAAE,IAAI;MAAa;MAC5BC,QAAQ,EAAEb,MAAM;MAChBc,eAAe,EAAE,CAAC,CAAG;IACvB,CAAC,CAAC;;IAEF;IACAZ,KAAI,GAAI,MAAMH,WAAW,CAACgB,IAAI,CAAC,sBAAsB,CAAC;IAEtDd,GAAG,CAACe,KAAK,CAACC,QAAQ,CAACf,KAAK,CAAC;IACzBA,KAAK,CAACgB,CAAA,GAAI,GAAG;IACbhB,KAAK,CAACiB,CAAA,GAAI,GAAG;IACbjB,KAAK,CAACkB,KAAK,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE;;IAEpB;IACAlB,EAAC,GAAI,IAAImB,SAAS,CAAC,8BAA8B,CAAC,EAAE;;IAEpDnB,EAAE,CAACoB,MAAK,GAAI,MAAM;MAChBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAEDtB,EAAE,CAACuB,SAAQ,GAAKC,KAAK,IAAK;MACxB,MAAMC,QAAO,GAAIC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACvB,IAAI,CAAC;MACvC,IAAIwB,QAAQ,CAACG,KAAK,EAAE;QAClB,IAAI,CAACzB,UAAS,IAAK,IAAG,GAAIsB,QAAQ,CAACxB,IAAI;MACzC,OAAO;QACL,IAAI,CAACE,UAAS,IAAKsB,QAAQ,CAACxB,IAAI;MAClC;IACF,CAAC;IAEDD,EAAE,CAAC6B,OAAM,GAAKC,KAAK,IAAK;MACtBT,OAAO,CAACS,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACxC,CAAC;IAED9B,EAAE,CAAC+B,OAAM,GAAI,MAAM;MACjBV,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAChC,CAAC;EACH,CAAC;EAEDU,aAAaA,CAAA,EAAG;IACd,IAAIhC,EAAE,EAAE;MACNA,EAAE,CAACiC,KAAK,CAAC,CAAC,EAAE;IACd;IACAlC,KAAK,EAAEmC,OAAO,CAAC,CAAC;IAChBpC,GAAG,EAAEoC,OAAO,CAAC,CAAC;EAChB,CAAC;EAEDC,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAAClC,YAAY,CAACmC,IAAI,CAAC,CAAC,EAAE;QAC5B;QACArC,EAAE,CAACsC,IAAI,CAAC,IAAI,CAACpC,YAAY,CAAC;QAC1B,IAAI,CAACA,YAAW,GAAI,EAAE,EAAE;MAC1B;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}