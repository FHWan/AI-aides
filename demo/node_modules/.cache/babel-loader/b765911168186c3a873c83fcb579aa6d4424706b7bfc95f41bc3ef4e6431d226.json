{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI;\nlet app;\nlet model;\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      aiResponse: '',\n      ws: null,\n      audioElement: null // 存储音频元素\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      autoStart: true,\n      resizeTo: window,\n      backgroundAlpha: 0\n    });\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1);\n\n    // 初始化音频元素\n    this.audioElement = new Audio();\n  },\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n      this.aiResponse = '';\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise(resolve => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      }\n    },\n    initWebSocket() {\n      return new Promise(resolve => {\n        if (this.ws) this.ws.close();\n        this.ws = new WebSocket('ws://localhost:4600/question');\n        this.ws.addEventListener('message', event => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data;\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n        });\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n        this.ws.addEventListener('error', error => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          if (this.aiResponse) {\n            this.generateAndPlayTTS(this.aiResponse);\n          }\n          this.ws = null;\n        });\n      });\n    },\n    async generateAndPlayTTS(text) {\n      try {\n        // 调用后端TTS接口\n        const response = await fetch(`http://localhost:4500/generate-tts?text=${encodeURIComponent(text)}`);\n        if (!response.ok) throw new Error('TTS生成失败');\n        const result = await response.json();\n        const audioUrl = `http://localhost:4500${result.audioFilePath}`;\n\n        // 停止当前播放并加载新音频\n        this.audioElement.pause();\n        this.audioElement.src = audioUrl;\n        this.audioElement.play().catch(error => {\n          console.error('音频播放失败:', error);\n        });\n      } catch (error) {\n        console.error('生成或播放语音时出错:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","model","data","userQuestion","aiResponse","ws","audioElement","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","stage","addChild","x","y","scale","set","Audio","methods","sendQuestion","e","preventDefault","trim","readyState","WebSocket","CLOSED","initWebSocket","CONNECTING","Promise","resolve","addEventListener","OPEN","send","close","event","response","JSON","parse","$nextTick","textarea","$el","querySelector","scrollTop","scrollHeight","console","log","error","generateAndPlayTTS","text","fetch","encodeURIComponent","ok","Error","result","json","audioUrl","audioFilePath","pause","src","play","catch"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI;\nlet app;\nlet model;\n\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      aiResponse: '',\n      ws: null,\n      audioElement: null // 存储音频元素\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      autoStart: true,\n      resizeTo: window,\n      backgroundAlpha: 0,\n    });\n\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1);\n\n    // 初始化音频元素\n    this.audioElement = new Audio();\n  },\n\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      this.aiResponse = '';\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      }\n    },\n\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) this.ws.close();\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n\n        this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data;\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n        });\n\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          if (this.aiResponse) {\n            this.generateAndPlayTTS(this.aiResponse);\n          }\n          this.ws = null;\n        });\n      });\n    },\n\n    async generateAndPlayTTS(text) {\n      try {\n        // 调用后端TTS接口\n        const response = await fetch(\n          `http://localhost:4500/generate-tts?text=${encodeURIComponent(text)}`\n        );\n        \n        if (!response.ok) throw new Error('TTS生成失败');\n        \n        const result = await response.json();\n        const audioUrl = `http://localhost:4500${result.audioFilePath}`;\n\n        // 停止当前播放并加载新音频\n        this.audioElement.pause();\n        this.audioElement.src = audioUrl;\n        this.audioElement.play().catch(error => {\n          console.error('音频播放失败:', error);\n        });\n      } catch (error) {\n        console.error('生成或播放语音时出错:', error);\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 新增音频播放控件（可隐藏） -->\n    <audio ref=\"audioPlayer\" style=\"display: none;\"></audio>\n\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n  </div>\n</template>\n\n<!-- 样式部分保持不变 -->\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边http://your-api-endpoint.com/ask框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 4%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 400px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}