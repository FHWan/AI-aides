{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app\"\n};\nconst _hoisted_2 = {\n  ref: \"liveCanvas\"\n};\nconst _hoisted_3 = {\n  ref: \"audioPlayer\",\n  style: {\n    \"display\": \"none\"\n  }\n};\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), _createCommentVNode(\" 新增音频播放控件（可隐藏） \"), _createElementVNode(\"audio\", _hoisted_3, null, 512 /* NEED_PATCH */), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userQuestion = $event),\n    class: \"transparent-textarea\",\n    placeholder: \"输入你的问题...\",\n    onKeydown: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendQuestion && $options.sendQuestion(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userQuestion]]), _createElementVNode(\"textarea\", {\n    value: $data.aiResponse,\n    class: \"response-textarea\",\n    placeholder: \"AI的回复...\",\n    readonly: \"\"\n  }, null, 8 /* PROPS */, _hoisted_4)]);\n}","map":{"version":3,"names":["class","ref","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_cache","$event","$data","userQuestion","placeholder","onKeydown","_withKeys","args","$options","sendQuestion","value","aiResponse","readonly","_hoisted_4"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI;\nlet app;\nlet model;\n\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      aiResponse: '',\n      ws: null,\n      audioElement: null // 存储音频元素\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      autoStart: true,\n      resizeTo: window,\n      backgroundAlpha: 0,\n    });\n\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1);\n\n    // 初始化音频元素\n    this.audioElement = new Audio();\n  },\n\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      this.aiResponse = '';\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      }\n    },\n\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) this.ws.close();\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n\n        this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data;\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n        });\n\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          if (this.aiResponse) {\n            this.generateAndPlayTTS(this.aiResponse);\n          }\n          this.ws = null;\n        });\n      });\n    },\n\n    async generateAndPlayTTS(text) {\n      try {\n        // 调用后端TTS接口\n        const response = await fetch(\n          `http://localhost:4500/generate-tts?text=${encodeURIComponent(text)}`\n        );\n        \n        if (!response.ok) throw new Error('TTS生成失败');\n        \n        const result = await response.json();\n        const audioUrl = `http://localhost:4500${result.audioFilePath}`;\n\n        // 停止当前播放并加载新音频\n        this.audioElement.pause();\n        this.audioElement.src = audioUrl;\n        this.audioElement.play().catch(error => {\n          console.error('音频播放失败:', error);\n        });\n      } catch (error) {\n        console.error('生成或播放语音时出错:', error);\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 新增音频播放控件（可隐藏） -->\n    <audio ref=\"audioPlayer\" style=\"display: none;\"></audio>\n\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n  </div>\n</template>\n\n<!-- 样式部分保持不变 -->\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边http://your-api-endpoint.com/ask框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 4%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 400px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>"],"mappings":";;EAuHOA,KAAK,EAAC;AAAK;;EACNC,GAAG,EAAC;AAAY;;EAGjBA,GAAG,EAAC,aAAa;EAACC,KAAsB,EAAtB;IAAA;EAAA;;mBA3H7B;;uBAuHEC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,mBAAA,CAAkC,UAAlCC,UAAkC,+BAElCC,mBAAA,mBAAsB,EACtBF,mBAAA,CAAwD,SAAxDG,UAAwD,+B,gBAExDH,mBAAA,CAKY;IAlIhB,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA8HeC,KAAA,CAAAC,YAAY,GAAAF,MAAA;IACrBV,KAAK,EAAC,sBAAsB;IAC5Ba,WAAW,EAAC,WAAW;IACtBC,SAAO,EAAAL,MAAA,QAAAA,MAAA,MAjIdM,SAAA,KAAAC,IAAA,KAiIsBC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;iEAHnBL,KAAA,CAAAC,YAAY,E,GAMvBP,mBAAA,CAKY;IAJTc,KAAK,EAAER,KAAA,CAAAS,UAAU;IAClBpB,KAAK,EAAC,mBAAmB;IACzBa,WAAW,EAAC,UAAU;IACtBQ,QAAQ,EAAR;0BAxINC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}