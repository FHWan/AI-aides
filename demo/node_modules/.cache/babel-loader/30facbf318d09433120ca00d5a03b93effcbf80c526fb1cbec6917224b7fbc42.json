{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n// 引入必要的库\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 用于存储pixi实例\n//let model; // 用于存储live2d实例\n\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      aiResponse: '',\n      ws: null,\n      audioUrl: '',\n      fullResponse: '',\n      // 新增：用于累积完整响应\n      model: null // 将model移到data中以便Vue响应式管理\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      // ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,\n      // 是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0 // 透明度\n    });\n\n    // 将model实例保存到组件data中\n    this.model = await Live2DModel.from('/UG/ugofficial.model3.json', {\n      // 展示工具箱（可以控制 live2d 的展出隐藏，使用特定表情）\n      ShowToolBox: false,\n      // 是否使用 indexDB 进行缓存优化，这样下一次载入就不会再发起网络请求了\n      LoadFromCache: true,\n      autoInteract: false // 关闭眼睛自动跟随功能\n    });\n    this.model.x = 500;\n    this.model.y = 100;\n    this.model.scale.set(1);\n    app.stage.addChild(this.model);\n    this.model.expression('1desk');\n  },\n  methods: {\n    // 新增表情切换方法\n    changeExpression(text) {\n      if (this.model) {\n        this.model.expression(text);\n      }\n    },\n    change_test() {\n      setInterval(() => {\n        let n = Math.random();\n        console.log(\"随机数0~1控制嘴巴Y轴高度-->\", n);\n        this.model.internalModel.coreModel.setParameterValueById(\"ParamMouthOpenY\", n);\n      }, 100);\n    },\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise(resolve => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n    initWebSocket() {\n      return new Promise(resolve => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n        this.ws = new WebSocket('ws://localhost:4600/question');\n\n        // 修改后的消息监听\n        this.ws.addEventListener('message', event => {\n          const response = JSON.parse(event.data);\n\n          // 处理错误情况\n          if (response.error) {\n            this.aiResponse = response.error;\n            return;\n          }\n\n          // 累积响应内容\n          if (response.data) {\n            this.aiResponse += response.data;\n            this.fullResponse += response.data; // 累积完整响应\n          }\n\n          // 自动滚动\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n\n          // 新增：仅在收到结束标记时触发语音合成\n          if (response.isEnd) {\n            const cleanText = this.fullResponse.replace(/<think>[\\s\\S]*?<\\/think>/g, '').replace(/[A-Za-z*]/g, '').trim();\n            if (cleanText) {\n              this.convertTextToSpeech(cleanText);\n            }\n            this.fullResponse = ''; // 清空累积内容\n          }\n        });\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', error => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n      });\n    },\n    // 修改后的语音合成方法\n    async convertTextToSpeech(text) {\n      try {\n        const response = await fetch(`http://localhost:4500/generate-tts?text=${encodeURIComponent(text)}`);\n        const data = await response.json();\n        if (data.audioUrl) {\n          this.playAudio(data.audioUrl);\n        } else {\n          console.error('音频生成失败:', data.error);\n        }\n      } catch (error) {\n        console.error('语音转换错误:', error);\n        this.aiResponse += '\\n[语音转换失败]';\n      }\n    },\n    playAudio(audioUrl) {\n      // 创建音频上下文\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n      // 获取音频数据\n      fetch(audioUrl).then(response => response.arrayBuffer()).then(audioData => audioContext.decodeAudioData(audioData)).then(audioBuffer => {\n        // 创建音频节点\n        const source = audioContext.createBufferSource();\n        const analyser = audioContext.createAnalyser();\n\n        // 配置分析器\n        analyser.fftSize = 256;\n        source.buffer = audioBuffer;\n\n        // 连接音频节点\n        source.connect(analyser);\n        analyser.connect(audioContext.destination);\n\n        // 初始化动画参数\n        let requestId = null;\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n        // 启动音频播放\n        source.start(0);\n\n        // 创建动画循环\n        const updateMouth = () => {\n          analyser.getByteFrequencyData(dataArray);\n\n          // 计算平均音量\n          const volume = dataArray.reduce((a, b) => a + b) / dataArray.length;\n          const mouthOpen = Math.min(1, volume / 180); // 调整除数可改变灵敏度\n\n          // 更新模型参数\n          this.model.internalModel.coreModel.setParameterValueById(\"ParamMouthOpenY\", mouthOpen);\n          requestId = requestAnimationFrame(updateMouth);\n        };\n\n        // 启动动画\n        requestId = requestAnimationFrame(updateMouth);\n\n        // 音频结束时清理\n        source.onended = () => {\n          cancelAnimationFrame(requestId);\n          this.model.internalModel.coreModel.setParameterValueById(\"ParamMouthOpenY\", 0);\n          audioContext.close();\n        };\n      }).catch(error => {\n        console.error('音频处理错误:', error);\n        this.model.internalModel.coreModel.setParameterValueById(\"ParamMouthOpenY\", 0);\n      });\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","data","userQuestion","aiResponse","ws","audioUrl","fullResponse","model","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","ShowToolBox","LoadFromCache","autoInteract","x","y","scale","set","stage","addChild","expression","methods","changeExpression","text","change_test","setInterval","n","Math","random","console","log","internalModel","coreModel","setParameterValueById","sendQuestion","e","preventDefault","trim","readyState","WebSocket","CLOSED","initWebSocket","CONNECTING","Promise","resolve","addEventListener","OPEN","send","error","close","event","response","JSON","parse","$nextTick","textarea","$el","querySelector","scrollTop","scrollHeight","isEnd","cleanText","replace","convertTextToSpeech","fetch","encodeURIComponent","json","playAudio","audioContext","AudioContext","webkitAudioContext","then","arrayBuffer","audioData","decodeAudioData","audioBuffer","source","createBufferSource","analyser","createAnalyser","fftSize","buffer","connect","destination","requestId","dataArray","Uint8Array","frequencyBinCount","start","updateMouth","getByteFrequencyData","volume","reduce","a","b","length","mouthOpen","min","requestAnimationFrame","onended","cancelAnimationFrame","catch"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n// 引入必要的库\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 用于存储pixi实例\n//let model; // 用于存储live2d实例\n\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      aiResponse: '',\n      ws: null,\n      audioUrl: '',\n      fullResponse: '', // 新增：用于累积完整响应\n      model: null, // 将model移到data中以便Vue响应式管理\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas, // ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,             // 是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0,         // 透明度\n    });\n\n    // 将model实例保存到组件data中\n    this.model = await Live2DModel.from('/UG/ugofficial.model3.json',{\n      // 展示工具箱（可以控制 live2d 的展出隐藏，使用特定表情）\n      ShowToolBox: false,\n\n    // 是否使用 indexDB 进行缓存优化，这样下一次载入就不会再发起网络请求了\n      LoadFromCache: true,\n      autoInteract: false, // 关闭眼睛自动跟随功能\n    });\n    this.model.x = 500;\n    this.model.y = 100;\n    this.model.scale.set(1);\n    app.stage.addChild(this.model);\n    this.model.expression('1desk');\n  },\n\n  methods: {\n    // 新增表情切换方法\n    changeExpression(text) {\n      if (this.model) {\n        this.model.expression(text);\n      }\n    },\n\n    change_test() {\n      setInterval(() => {\n        let n = Math.random();\n        console.log(\"随机数0~1控制嘴巴Y轴高度-->\", n);\n        this.model.internalModel.coreModel.setParameterValueById(\"ParamMouthOpenY\", n);\n      }, 100);\n    },\n\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n        \n         // 修改后的消息监听\n         this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          \n          // 处理错误情况\n          if (response.error) {\n            this.aiResponse = response.error;\n            return;\n          }\n\n          // 累积响应内容\n          if (response.data) {\n            this.aiResponse += response.data;\n            this.fullResponse += response.data; // 累积完整响应\n          }\n\n          // 自动滚动\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n\n          // 新增：仅在收到结束标记时触发语音合成\n          if (response.isEnd) {\n            const cleanText = this.fullResponse\n              .replace(/<think>[\\s\\S]*?<\\/think>/g, '')\n              .replace(/[A-Za-z*]/g, '')\n              .trim();\n\n            if (cleanText) {\n              this.convertTextToSpeech(cleanText);\n            }\n            \n            this.fullResponse = ''; // 清空累积内容\n          }\n        });\n        \n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n      });\n    },\n    \n    // 修改后的语音合成方法\n    async convertTextToSpeech(text) {\n      try {\n        const response = await fetch(\n          `http://localhost:4500/generate-tts?text=${encodeURIComponent(text)}`\n        );\n        const data = await response.json();\n        \n        if (data.audioUrl) {\n          this.playAudio(data.audioUrl);\n        } else {\n          console.error('音频生成失败:', data.error);\n        }\n      } catch (error) {\n        console.error('语音转换错误:', error);\n        this.aiResponse += '\\n[语音转换失败]';\n      }\n    },\n\n    playAudio(audioUrl) {\n      // 创建音频上下文\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      \n      // 获取音频数据\n      fetch(audioUrl)\n        .then(response => response.arrayBuffer())\n        .then(audioData => audioContext.decodeAudioData(audioData))\n        .then(audioBuffer => {\n          // 创建音频节点\n          const source = audioContext.createBufferSource();\n          const analyser = audioContext.createAnalyser();\n          \n          // 配置分析器\n          analyser.fftSize = 256;\n          source.buffer = audioBuffer;\n          \n          // 连接音频节点\n          source.connect(analyser);\n          analyser.connect(audioContext.destination);\n          \n          // 初始化动画参数\n          let requestId = null;\n          const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n          // 启动音频播放\n          source.start(0);\n\n          // 创建动画循环\n          const updateMouth = () => {\n            analyser.getByteFrequencyData(dataArray);\n            \n            // 计算平均音量\n            const volume = dataArray.reduce((a, b) => a + b) / dataArray.length;\n            const mouthOpen = Math.min(1, volume / 180); // 调整除数可改变灵敏度\n            \n            // 更新模型参数\n            this.model.internalModel.coreModel.setParameterValueById(\n              \"ParamMouthOpenY\",\n              mouthOpen\n            );\n            \n            requestId = requestAnimationFrame(updateMouth);\n          };\n\n          // 启动动画\n          requestId = requestAnimationFrame(updateMouth);\n\n          // 音频结束时清理\n          source.onended = () => {\n            cancelAnimationFrame(requestId);\n            this.model.internalModel.coreModel.setParameterValueById(\n              \"ParamMouthOpenY\",\n              0\n            );\n            audioContext.close();\n          };\n        })\n        .catch(error => {\n          console.error('音频处理错误:', error);\n          this.model.internalModel.coreModel.setParameterValueById(\n            \"ParamMouthOpenY\",\n            0\n          );\n        });\n    }\n  }\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 用户输入框 -->\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <!-- AI响应展示 -->\n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n\n    <!-- 新增表情切换按钮 -->\n    <button \n      class=\"expression-btn_1\"\n      @click=\"changeExpression('1desk')\"\n      v-if=\"model\" \n    >\n      重置表情😀\n    </button>\n\n      <button \n      class=\"expression-btn_2\"\n      @click=\"changeExpression()\"\n      v-if=\"model\" \n    >\n      随机表情🤩\n    </button>\n\n    <button \n      class=\"expression-btn_3\"\n      @click=\"change_test()\"\n      v-if=\"model\" \n    >\n      测试按钮\n    </button>\n  </div>\n</template>\n\n<style scoped>\n.app {\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 4%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 400px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.expression-btn_1 {\n  position: absolute;\n  right: 18.1%;\n  top: 63%;\n  padding: 12px 24px;\n  font-size: 20px;\n  width: 12%;\n  background-color: rgba(106, 240, 128, 0.9);\n  border: none;\n  border-radius: 25px;\n  color: rgb(0, 0, 0);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.expression-btn_2 {\n  position: absolute;\n  right: 4%;\n  top: 63%;\n  padding: 12px 24px;\n  font-size: 20px;\n  width: 12%;\n  background-color: rgba(106, 240, 128, 0.9);\n  border: none;\n  border-radius: 25px;\n  color: rgb(0, 0, 0);\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.expression-btn_3 {\n  position: absolute;\n  right: 12%;\n  top: 70%;\n  padding: 12px 24px;\n  font-size: 20px;\n  width: 10%;\n  background-color: rgba(106, 179, 240, 0.9);\n  border: none;\n  border-radius: 25px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}