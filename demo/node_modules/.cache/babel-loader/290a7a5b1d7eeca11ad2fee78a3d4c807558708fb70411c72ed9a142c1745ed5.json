{"ast":null,"code":"// 引入必要的库\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 用于存储pixi实例\nlet model; // 用于存储live2d实例\n\nexport default {\n  data() {\n    return {\n      userQuestion: '',\n      // 存储用户输入的问题\n      aiResponse: '',\n      // 存储AI返回的回复\n      ws: null,\n      // 存储WebSocket实例\n      audioUrl: '' // 存储音频文件路径\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      // ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,\n      // 是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0 // 透明度\n    });\n\n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例\n  },\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise(resolve => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n    initWebSocket() {\n      return new Promise(resolve => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n        this.ws = new WebSocket('ws://localhost:4600/question');\n\n        // 新增消息监听\n        this.ws.addEventListener('message', event => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data; // 持续拼接响应内容\n\n          // 自动滚动到底部\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n\n          // 完成后开始语音转换\n          if (response.data) {\n            this.convertTextToSpeech(response.data);\n          }\n        });\n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', error => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n      });\n    },\n    async convertTextToSpeech(text) {\n      // 提取<think>标签后的文本并去除英文\n      const textToConvert = text.replace(/<\\/?think>/g, '').replace(/[A-Za-z0-9]/g, '');\n      //const textToConvert = text.replace(/<think>[\\s\\S]*?<\\/think>/g, '')\n      //                          .replace(/[A-Za-z0-9]/g, '');\n\n      // 请求语音合成 API\n      try {\n        const response = await fetch(`http://localhost:4500/generate-tts?text=${encodeURIComponent(textToConvert)}`);\n        const data = await response.json();\n        if (data.audioUrl) {\n          this.audioUrl = data.audioUrl; // 获取音频文件路径\n\n          // 播放音频\n          this.playAudio(this.audioUrl);\n        } else {\n          console.error('音频生成失败');\n        }\n      } catch (error) {\n        console.error('语音转换错误:', error);\n        this.aiResponse = '语音转换失败，请稍后重试';\n      }\n    },\n    playAudio(audioUrl) {\n      const audio = new Audio(audioUrl);\n      audio.play().catch(error => {\n        console.error('播放音频错误:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","model","data","userQuestion","aiResponse","ws","audioUrl","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","stage","addChild","x","y","scale","set","methods","sendQuestion","e","preventDefault","trim","readyState","WebSocket","CLOSED","initWebSocket","CONNECTING","Promise","resolve","addEventListener","OPEN","send","console","error","close","event","response","JSON","parse","$nextTick","textarea","$el","querySelector","scrollTop","scrollHeight","convertTextToSpeech","log","text","textToConvert","replace","fetch","encodeURIComponent","json","playAudio","audio","Audio","play","catch"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n// 引入必要的库\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 用于存储pixi实例\nlet model; // 用于存储live2d实例\n\nexport default {\n  data() {\n    return {\n      userQuestion: '', // 存储用户输入的问题\n      aiResponse: '',   // 存储AI返回的回复\n      ws: null,          // 存储WebSocket实例\n      audioUrl: '',      // 存储音频文件路径\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas, // ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,             // 是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0,         // 透明度\n    });\n\n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例\n  },\n\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 清空之前的回复\n      this.aiResponse = ''; // 清空响应内容\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n        \n        // 新增消息监听\n        this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data; // 持续拼接响应内容\n          \n          // 自动滚动到底部\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n\n          // 完成后开始语音转换\n          if (response.data) {\n            this.convertTextToSpeech(response.data);\n          }\n        });\n        \n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n      });\n    },\n\n    async convertTextToSpeech(text) {\n      // 提取<think>标签后的文本并去除英文\n      const textToConvert = text.replace(/<\\/?think>/g, '')\n                                .replace(/[A-Za-z0-9]/g, '');\n      //const textToConvert = text.replace(/<think>[\\s\\S]*?<\\/think>/g, '')\n      //                          .replace(/[A-Za-z0-9]/g, '');\n\n      // 请求语音合成 API\n      try {\n        const response = await fetch(`http://localhost:4500/generate-tts?text=${encodeURIComponent(textToConvert)}`);\n        const data = await response.json();\n        if (data.audioUrl) {\n          this.audioUrl = data.audioUrl; // 获取音频文件路径\n\n          // 播放音频\n          this.playAudio(this.audioUrl);\n        } else {\n          console.error('音频生成失败');\n        }\n      } catch (error) {\n        console.error('语音转换错误:', error);\n        this.aiResponse = '语音转换失败，请稍后重试';\n      }\n    },\n\n    playAudio(audioUrl) {\n      const audio = new Audio(audioUrl);\n      audio.play().catch((error) => {\n        console.error('播放音频错误:', error);\n      });\n    }\n  }\n}\n</script>\n\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 用户输入框 -->\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <!-- AI响应展示 -->\n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n  </div>\n</template>\n\n<style scoped>\n.app {\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 4%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 16px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 400px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}