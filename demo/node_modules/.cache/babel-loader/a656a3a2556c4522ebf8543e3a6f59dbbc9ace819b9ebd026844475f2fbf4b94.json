{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app\"\n};\nconst _hoisted_2 = {\n  ref: \"liveCanvas\"\n};\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 自定义ref=\\\"liveCanvas\\\"： \"), _createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */), _createCommentVNode(\" 用户输入框 \"), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userQuestion = $event),\n    class: \"transparent-textarea\",\n    placeholder: \"输入你的问题...\",\n    onKeydown: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendQuestion && $options.sendQuestion(...args), [\"enter\"]))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userQuestion]]), _createCommentVNode(\" AI响应展示 \"), _createElementVNode(\"textarea\", {\n    value: $data.aiResponse,\n    class: \"response-textarea\",\n    placeholder: \"AI的回复...\",\n    readonly: \"\"\n  }, null, 8 /* PROPS */, _hoisted_3)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_cache","$event","$data","userQuestion","placeholder","onKeydown","_withKeys","args","$options","sendQuestion","value","aiResponse","readonly","_hoisted_3"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport {Live2DModel} from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\n \nexport default {\n//需要引入：\n  data() {\n    return {\n      userQuestion: '', // 存储用户输入的问题\n      aiResponse: '',   // 存储AI返回的回复\n      ws: null // 存储WebSocket实例\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,//ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,            //是否开启自动播放\n      resizeTo: window,           \n      backgroundAlpha: 0,  //透明度\n    });\n \n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n  },\n\n  methods: {\n    async sendQuestion(e) {\n      e.preventDefault();\n      if (!this.userQuestion.trim()) return;\n\n      // 确保连接可用\n      if (!this.ws || this.ws.readyState === WebSocket.CLOSED) {\n        await this.initWebSocket();\n      }\n\n      // 确保连接已建立\n      if (this.ws.readyState === WebSocket.CONNECTING) {\n        await new Promise((resolve) => {\n          this.ws.addEventListener('open', resolve);\n        });\n      }\n\n      // 发送消息\n      if (this.ws.readyState === WebSocket.OPEN) {\n        this.ws.send(this.userQuestion);\n        this.userQuestion = '';\n      } else {\n        console.error('WebSocket连接异常状态:', this.ws.readyState);\n        this.aiResponse = \"连接异常，请刷新页面重试\";\n      }\n    },\n    initWebSocket() {\n      return new Promise((resolve) => {\n        if (this.ws) {\n          this.ws.close(); // 关闭旧连接\n        }\n\n        this.ws = new WebSocket('ws://localhost:4600/question');\n        \n        // 新增消息监听\n        this.ws.addEventListener('message', (event) => {\n          const response = JSON.parse(event.data);\n          this.aiResponse += response.data; // 持续拼接响应内容\n          \n          // 自动滚动到底部\n          this.$nextTick(() => {\n            const textarea = this.$el.querySelector('.response-textarea');\n            textarea.scrollTop = textarea.scrollHeight;\n          });\n        });\n        \n        this.ws.addEventListener('open', () => {\n          console.log('WebSocket连接已建立');\n          resolve();\n        });\n\n        // 错误处理增强\n        this.ws.addEventListener('error', (error) => {\n          console.error('WebSocket错误:', error);\n          this.aiResponse = \"连接出现错误，请检查控制台\";\n        });\n\n        // 关闭处理\n        this.ws.addEventListener('close', () => {\n          console.log('WebSocket连接已关闭');\n          this.ws = null; // 重要！重置连接实例\n        });\n        \n        // ...其他事件监听保持原样...\n      });\n    }\n  }\n}\n</script>\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 用户输入框 -->\n    <textarea\n      v-model=\"userQuestion\"\n      class=\"transparent-textarea\"\n      placeholder=\"输入你的问题...\"\n      @keydown.enter=\"sendQuestion\"\n    ></textarea>\n    \n    <!-- AI响应展示 -->\n    <textarea\n      :value=\"aiResponse\"\n      class=\"response-textarea\"\n      placeholder=\"AI的回复...\"\n      readonly\n    ></textarea>\n\n  </div>\n</template>\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边http://your-api-endpoint.com/ask框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 8%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 25%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>\n"],"mappings":";;EAyGOA,KAAK,EAAC;AAAK;;EAENC,GAAG,EAAC;AAAY;mBA3G5B;;uBAyGEC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,mBAAA,4BAA6B,EAC7BC,mBAAA,CAAkC,UAAlCC,UAAkC,+BAElCF,mBAAA,WAAc,E,gBACdC,mBAAA,CAKY;IAnHhB,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA+GeC,KAAA,CAAAC,YAAY,GAAAF,MAAA;IACrBR,KAAK,EAAC,sBAAsB;IAC5BW,WAAW,EAAC,WAAW;IACtBC,SAAO,EAAAL,MAAA,QAAAA,MAAA,MAlHdM,SAAA,KAAAC,IAAA,KAkHsBC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;iEAHnBL,KAAA,CAAAC,YAAY,E,GAMvBN,mBAAA,YAAe,EACfC,mBAAA,CAKY;IAJTY,KAAK,EAAER,KAAA,CAAAS,UAAU;IAClBlB,KAAK,EAAC,mBAAmB;IACzBW,WAAW,EAAC,UAAU;IACtBQ,QAAQ,EAAR;0BA1HNC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}