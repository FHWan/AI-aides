{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*!\n * @pixi/prepare - v6.5.10\n * Compiled Thu, 06 Jul 2023 15:25:11 UTC\n *\n * @pixi/prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\nimport { Texture, BaseTexture, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { Container } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * Default number of uploads per frame using prepare plugin.\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\nsettings.UPLOADS_PER_FRAME = 4;\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\n/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nvar CountLimiter = /** @class */function () {\n  /**\n   * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n   */\n  function CountLimiter(maxItemsPerFrame) {\n    this.maxItemsPerFrame = maxItemsPerFrame;\n    this.itemsLeft = 0;\n  }\n  /** Resets any counting properties to start fresh on a new frame. */\n  CountLimiter.prototype.beginFrame = function () {\n    this.itemsLeft = this.maxItemsPerFrame;\n  };\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @returns If the item is allowed to be uploaded.\n   */\n  CountLimiter.prototype.allowedToUpload = function () {\n    return this.itemsLeft-- > 0;\n  };\n  return CountLimiter;\n}();\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item, queue) {\n  var result = false;\n  // Objects with multiple textures\n  if (item && item._textures && item._textures.length) {\n    for (var i = 0; i < item._textures.length; i++) {\n      if (item._textures[i] instanceof Texture) {\n        var baseTexture = item._textures[i].baseTexture;\n        if (queue.indexOf(baseTexture) === -1) {\n          queue.push(baseTexture);\n          result = true;\n        }\n      }\n    }\n  }\n  return result;\n}\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item, queue) {\n  if (item.baseTexture instanceof BaseTexture) {\n    var texture = item.baseTexture;\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item, queue) {\n  if (item._texture && item._texture instanceof Texture) {\n    var texture = item._texture.baseTexture;\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper, item) {\n  if (item instanceof Text) {\n    // updating text will return early if it is not dirty\n    item.updateText(true);\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper, item) {\n  if (item instanceof TextStyle) {\n    var font = item.toFontString();\n    TextMetrics.measureFont(font);\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item, queue) {\n  if (item instanceof Text) {\n    // push the text style to prepare it - this can be really expensive\n    if (queue.indexOf(item.style) === -1) {\n      queue.push(item.style);\n    }\n    // also push the text object so that we can render it (to canvas/texture) if needed\n    if (queue.indexOf(item) === -1) {\n      queue.push(item);\n    }\n    // also push the Text's texture for upload to GPU\n    var texture = item._texture.baseTexture;\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item, queue) {\n  if (item instanceof TextStyle) {\n    if (queue.indexOf(item) === -1) {\n      queue.push(item);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n * @abstract\n * @memberof PIXI\n */\nvar BasePrepare = /** @class */function () {\n  /**\n   * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n   */\n  function BasePrepare(renderer) {\n    var _this = this;\n    this.limiter = new CountLimiter(settings.UPLOADS_PER_FRAME);\n    this.renderer = renderer;\n    this.uploadHookHelper = null;\n    this.queue = [];\n    this.addHooks = [];\n    this.uploadHooks = [];\n    this.completes = [];\n    this.ticking = false;\n    this.delayedTick = function () {\n      // unlikely, but in case we were destroyed between tick() and delayedTick()\n      if (!_this.queue) {\n        return;\n      }\n      _this.prepareItems();\n    };\n    // hooks to find the correct texture\n    this.registerFindHook(findText);\n    this.registerFindHook(findTextStyle);\n    this.registerFindHook(findMultipleBaseTextures);\n    this.registerFindHook(findBaseTexture);\n    this.registerFindHook(findTexture);\n    // upload hooks\n    this.registerUploadHook(drawText);\n    this.registerUploadHook(calculateTextStyle);\n  }\n  /** @ignore */\n  BasePrepare.prototype.upload = function (item, done) {\n    var _this = this;\n    if (typeof item === 'function') {\n      done = item;\n      item = null;\n    }\n    if (done) {\n      deprecation('6.5.0', 'BasePrepare.upload callback is deprecated, use the return Promise instead.');\n    }\n    return new Promise(function (resolve) {\n      // If a display object, search for items\n      // that we could upload\n      if (item) {\n        _this.add(item);\n      }\n      // TODO: remove done callback and just use resolve\n      var complete = function () {\n        done === null || done === void 0 ? void 0 : done();\n        resolve();\n      };\n      // Get the items for upload from the display\n      if (_this.queue.length) {\n        _this.completes.push(complete);\n        if (!_this.ticking) {\n          _this.ticking = true;\n          Ticker.system.addOnce(_this.tick, _this, UPDATE_PRIORITY.UTILITY);\n        }\n      } else {\n        complete();\n      }\n    });\n  };\n  /**\n   * Handle tick update\n   * @private\n   */\n  BasePrepare.prototype.tick = function () {\n    setTimeout(this.delayedTick, 0);\n  };\n  /**\n   * Actually prepare items. This is handled outside of the tick because it will take a while\n   * and we do NOT want to block the current animation frame from rendering.\n   * @private\n   */\n  BasePrepare.prototype.prepareItems = function () {\n    this.limiter.beginFrame();\n    // Upload the graphics\n    while (this.queue.length && this.limiter.allowedToUpload()) {\n      var item = this.queue[0];\n      var uploaded = false;\n      if (item && !item._destroyed) {\n        for (var i = 0, len = this.uploadHooks.length; i < len; i++) {\n          if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n            this.queue.shift();\n            uploaded = true;\n            break;\n          }\n        }\n      }\n      if (!uploaded) {\n        this.queue.shift();\n      }\n    }\n    // We're finished\n    if (!this.queue.length) {\n      this.ticking = false;\n      var completes = this.completes.slice(0);\n      this.completes.length = 0;\n      for (var i = 0, len = completes.length; i < len; i++) {\n        completes[i]();\n      }\n    } else {\n      // if we are not finished, on the next rAF do this again\n      Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n    }\n  };\n  /**\n   * Adds hooks for finding items.\n   * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n   *          function must return `true` if it was able to add item to the queue.\n   * @returns Instance of plugin for chaining.\n   */\n  BasePrepare.prototype.registerFindHook = function (addHook) {\n    if (addHook) {\n      this.addHooks.push(addHook);\n    }\n    return this;\n  };\n  /**\n   * Adds hooks for uploading items.\n   * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n   *          function must return `true` if it was able to handle upload of item.\n   * @returns Instance of plugin for chaining.\n   */\n  BasePrepare.prototype.registerUploadHook = function (uploadHook) {\n    if (uploadHook) {\n      this.uploadHooks.push(uploadHook);\n    }\n    return this;\n  };\n  /**\n   * Manually add an item to the uploading queue.\n   * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n   *        add to the queue\n   * @returns Instance of plugin for chaining.\n   */\n  BasePrepare.prototype.add = function (item) {\n    // Add additional hooks for finding elements on special\n    // types of objects that\n    for (var i = 0, len = this.addHooks.length; i < len; i++) {\n      if (this.addHooks[i](item, this.queue)) {\n        break;\n      }\n    }\n    // Get children recursively\n    if (item instanceof Container) {\n      for (var i = item.children.length - 1; i >= 0; i--) {\n        this.add(item.children[i]);\n      }\n    }\n    return this;\n  };\n  /** Destroys the plugin, don't use after this. */\n  BasePrepare.prototype.destroy = function () {\n    if (this.ticking) {\n      Ticker.system.remove(this.tick, this);\n    }\n    this.ticking = false;\n    this.addHooks = null;\n    this.uploadHooks = null;\n    this.renderer = null;\n    this.completes = null;\n    this.queue = null;\n    this.limiter = null;\n    this.uploadHookHelper = null;\n  };\n  return BasePrepare;\n}();\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item) {\n  if (item instanceof BaseTexture) {\n    // if the texture already has a GL texture, then the texture has been prepared or rendered\n    // before now. If the texture changed, then the changer should be calling texture.update() which\n    // reuploads the texture without need for preparing it again\n    if (!item._glTextures[renderer.CONTEXT_UID]) {\n      renderer.texture.bind(item);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer, item) {\n  if (!(item instanceof Graphics)) {\n    return false;\n  }\n  var geometry = item.geometry;\n  // update dirty graphics to get batches\n  item.finishPoly();\n  geometry.updateBatches();\n  var batches = geometry.batches;\n  // upload all textures found in styles\n  for (var i = 0; i < batches.length; i++) {\n    var texture = batches[i].style.texture;\n    if (texture) {\n      uploadBaseTextures(renderer, texture.baseTexture);\n    }\n  }\n  // if its not batchable - update vao for particular shader\n  if (!geometry.batchable) {\n    renderer.geometry.bind(geometry, item._resolveDirectShader(renderer));\n  }\n  return true;\n}\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue) {\n  if (item instanceof Graphics) {\n    queue.push(item);\n    return true;\n  }\n  return false;\n}\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nvar Prepare = /** @class */function (_super) {\n  __extends(Prepare, _super);\n  /**\n   * @param {PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function Prepare(renderer) {\n    var _this = _super.call(this, renderer) || this;\n    _this.uploadHookHelper = _this.renderer;\n    // Add textures and graphics to upload\n    _this.registerFindHook(findGraphics);\n    _this.registerUploadHook(uploadBaseTextures);\n    _this.registerUploadHook(uploadGraphics);\n    return _this;\n  }\n  /** @ignore */\n  Prepare.extension = {\n    name: 'prepare',\n    type: ExtensionType.RendererPlugin\n  };\n  return Prepare;\n}(BasePrepare);\n\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nvar TimeLimiter = /** @class */function () {\n  /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n  function TimeLimiter(maxMilliseconds) {\n    this.maxMilliseconds = maxMilliseconds;\n    this.frameStart = 0;\n  }\n  /** Resets any counting properties to start fresh on a new frame. */\n  TimeLimiter.prototype.beginFrame = function () {\n    this.frameStart = Date.now();\n  };\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @returns - If the item is allowed to be uploaded.\n   */\n  TimeLimiter.prototype.allowedToUpload = function () {\n    return Date.now() - this.frameStart < this.maxMilliseconds;\n  };\n  return TimeLimiter;\n}();\nexport { BasePrepare, CountLimiter, Prepare, TimeLimiter };","map":{"version":3,"names":["settings","UPLOADS_PER_FRAME","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","CountLimiter","maxItemsPerFrame","itemsLeft","beginFrame","allowedToUpload","findMultipleBaseTextures","item","queue","result","_textures","length","i","Texture","baseTexture","indexOf","push","findBaseTexture","BaseTexture","texture","findTexture","_texture","drawText","_helper","Text","updateText","calculateTextStyle","TextStyle","font","toFontString","TextMetrics","measureFont","findText","style","findTextStyle","BasePrepare","renderer","_this","limiter","uploadHookHelper","addHooks","uploadHooks","completes","ticking","delayedTick","prepareItems","registerFindHook","registerUploadHook","upload","done","deprecation","Promise","resolve","add","complete","Ticker","system","addOnce","tick","UPDATE_PRIORITY","UTILITY","setTimeout","uploaded","_destroyed","len","shift","slice","addHook","uploadHook","Container","children","destroy","remove","uploadBaseTextures","_glTextures","CONTEXT_UID","bind","uploadGraphics","Graphics","geometry","finishPoly","updateBatches","batches","batchable","_resolveDirectShader","findGraphics","Prepare","_super","call","extension","name","type","ExtensionType","RendererPlugin","TimeLimiter","maxMilliseconds","frameStart","Date","now"],"sources":["../../src/settings.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/CountLimiter.ts","../../src/BasePrepare.ts","../../src/Prepare.ts","../../src/TimeLimiter.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Default number of uploads per frame using prepare plugin.\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\nsettings.UPLOADS_PER_FRAME = 4;\n\nexport { settings };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /** The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n","import { Texture, BaseTexture } from '@pixi/core';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { settings } from '@pixi/settings';\nimport type { DisplayObject } from '@pixi/display';\nimport { Container } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { AbstractRenderer } from '@pixi/core';\nimport { deprecation } from '@pixi/utils';\n\ninterface IArrowFunction\n{\n    (): void;\n}\ninterface IUploadHook\n{\n    (helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook\n{\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject\n{\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle | Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item && item._textures && item._textures.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (queue.indexOf(baseTexture) === -1)\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction drawText(_helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n * @private\n * @param _helper - Not used by this upload handler\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction calculateTextStyle(_helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (queue.indexOf(item.style) === -1)\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: AbstractRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer)\n    {\n        this.limiter = new CountLimiter(settings.UPLOADS_PER_FRAME);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     * @method PIXI.BasePrepare#upload\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} [item] -\n     *        Container or display object to search for items to upload or the items to upload themselves,\n     *        or optionally ommitted, if items have been added using {@link PIXI.BasePrepare#add `prepare.add`}.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture): Promise<void>;\n\n    /**\n     * Use the Promise-based API instead.\n     * @method PIXI.BasePrepare#upload\n     * @deprecated since version 6.5.0\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n     *        Item to upload.\n     * @param {Function} [done] - Callback when completed.\n     */\n    upload(item?: IDisplayObjectExtended | Container | BaseTexture | Texture, done?: () => void): void;\n\n    /**\n     * Use the Promise-based API instead.\n     * @method PIXI.BasePrepare#upload\n     * @deprecated since version 6.5.0\n     * @param {Function} [done] - Callback when completed.\n     */\n    upload(done?: () => void): void;\n\n    /** @ignore */\n    upload(\n        item?: IDisplayObjectExtended | Container | BaseTexture | Texture | (() => void),\n        done?: () => void): Promise<void>\n    {\n        if (typeof item === 'function')\n        {\n            done = item as () => void;\n            item = null;\n        }\n\n        // #if _DEBUG\n        if (done)\n        {\n            deprecation('6.5.0', 'BasePrepare.upload callback is deprecated, use the return Promise instead.');\n        }\n        // #endif\n\n        return new Promise((resolve) =>\n        {\n            // If a display object, search for items\n            // that we could upload\n            if (item)\n            {\n                this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n            }\n\n            // TODO: remove done callback and just use resolve\n            const complete = () =>\n            {\n                done?.();\n                resolve();\n            };\n\n            // Get the items for upload from the display\n            if (this.queue.length)\n            {\n                this.completes.push(complete);\n\n                if (!this.ticking)\n                {\n                    this.ticking = true;\n                    Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n                }\n            }\n            else\n            {\n                complete();\n            }\n        });\n    }\n\n    /**\n     * Handle tick update\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @returns Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @returns Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @returns Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n","import { BaseTexture, ExtensionType } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport type { IDisplayObjectExtended } from './BasePrepare';\nimport { BasePrepare } from './BasePrepare';\n\nimport type { AbstractRenderer, Renderer, ExtensionMetadata } from '@pixi/core';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @returns If item was uploaded.\n */\nfunction uploadGraphics(renderer: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @returns if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'prepare',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n","/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @returns - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}