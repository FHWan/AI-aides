{"ast":null,"code":"//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport { Live2DModel } from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\n\nexport default {\n  //需要引入：\n  data() {\n    return {\n      userQuestion: '',\n      // 存储用户输入的问题\n      aiResponse: '' // 存储AI返回的回复\n    };\n  },\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,\n      //ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,\n      //是否开启自动播放\n      resizeTo: window,\n      backgroundAlpha: 0 //透明度\n    });\n\n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    //model = await Live2DModel.from('/dujiaoshou_4/dujiaoshou_4.model3.json');\n    //model = await Live2DModel.from('/huonululu_5/huonululu_5.model3.json');\n    //model = await Live2DModel.from('/lingbo/lingbo.model3.json');\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n  },\n  //需要引入\n  beforeUnmount() {\n    model?.destroy();\n    app?.destroy();\n  },\n  methods: {\n    // 调用DeepSeek AI API获取回复\n    async askQuestion() {\n      if (!this.userQuestion.trim()) return; // 如果没有输入问题则不处理\n\n      try {\n        const response = await fetch('http://localhost:3000', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question: this.userQuestion\n          })\n        });\n        const data = await response.json();\n        if (data && data.reply) {\n          this.aiResponse = data.reply; // 设置AI的回复\n        } else {\n          this.aiResponse = '抱歉，我无法理解您的问题。';\n        }\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        this.aiResponse = '请求失败，请稍后再试。';\n      }\n    }\n  }\n};","map":{"version":3,"names":["PIXI","Live2DModel","window","app","model","data","userQuestion","aiResponse","mounted","Application","view","$refs","liveCanvas","autoStart","resizeTo","backgroundAlpha","from","stage","addChild","x","y","scale","set","beforeUnmount","destroy","methods","askQuestion","trim","response","fetch","method","headers","body","JSON","stringify","question","json","reply","error","console"],"sources":["/home/fan/docker_image/live2d/demo/src/App.vue"],"sourcesContent":["<script>\n//以下需要引入：\nimport * as PIXI from 'pixi.js';\nimport {Live2DModel} from 'pixi-live2d-display/cubism4';\nwindow.PIXI = PIXI; // 为了pixi-live2d-display内部调用\nlet app; // 为了存储pixi实例\nlet model; // 为了存储live2d实例\n \nexport default {\n//需要引入：\n  data() {\n    return {\n      userQuestion: '', // 存储用户输入的问题\n      aiResponse: '',   // 存储AI返回的回复\n    };\n  },\n\n  async mounted() {\n    app = new PIXI.Application({\n      view: this.$refs.liveCanvas,//ref组件绑定，liveCanvas为下文自定义的\n      autoStart: true,            //是否开启自动播放\n      resizeTo: window,           \n      backgroundAlpha: 0,  //透明度\n    });\n \n    // 这里是放live2d资源的地方，直接相对路径引用即可\n    //model = await Live2DModel.from('/dujiaoshou_4/dujiaoshou_4.model3.json');\n    //model = await Live2DModel.from('/huonululu_5/huonululu_5.model3.json');\n    //model = await Live2DModel.from('/lingbo/lingbo.model3.json');\n    model = await Live2DModel.from('/ulk/ulk.model3.json');\n\n    app.stage.addChild(model);\n    model.x = 500;\n    model.y = 100;\n    model.scale.set(1); // 调整缩放比例,0.1-0.2整体比较合适\n  },\n//需要引入\n  beforeUnmount() {\n    model?.destroy();\n    app?.destroy();\n  },\n  methods: {\n    // 调用DeepSeek AI API获取回复\n    async askQuestion() {\n      if (!this.userQuestion.trim()) return; // 如果没有输入问题则不处理\n\n      try {\n        const response = await fetch('http://localhost:3000', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ question: this.userQuestion }),\n        });\n\n        const data = await response.json();\n\n        if (data && data.reply) {\n          this.aiResponse = data.reply; // 设置AI的回复\n        } else {\n          this.aiResponse = '抱歉，我无法理解您的问题。';\n        }\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        this.aiResponse = '请求失败，请稍后再试。';\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"app\">\n    <!-- 自定义ref=\"liveCanvas\"： -->\n    <canvas ref=\"liveCanvas\"></canvas>\n\n    <!-- 添加一个文本输入框，用于用户输入问题 -->\n    <textarea class=\"transparent-textarea\" v-model=\"userQuestion\" placeholder=\"请输入文本...\" @keydown.enter=\"askQuestion\"></textarea>\n\n    <!-- 添加一个文本框用于显示AI的回复 -->\n    <textarea class=\"response-textarea\" v-model=\"aiResponse\" placeholder=\"AI的回复...\" readonly></textarea>\n\n  </div>\n</template>\n \n<style scoped>\n.app{\n  background-image: url('/public/picture/behind02.jpg'); /* 设置背景图片 */\n  background-size: cover; /* 确保图片覆盖整个容器 */\n  background-position: center; /* 居中显示图片 */\n  background-attachment: fixed; /* 背景固定 */\n  height: 100vh; /* 高度设置为视口高度，确保背景覆盖整个页面 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative; /* 使得可以相对定位其他元素 */\n}\n\n.transparent-textarea {\n  position: absolute;\n  bottom: 7%; /* 设置距离页面底部的距离，使其在中间偏下 */\n  left: 50%; /* 水平居中 */\n  transform: translateX(-50%); /* 调整以确保输入框完全居中 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 60%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度，使文本框足够高以容纳多行文本 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\n.response-textarea {\n  position: absolute;\n  right: 8%; /* 设置距离页面右侧的距离 */\n  top: 20%; /* 设置距离页面顶部的距离 */\n  padding: 10px;\n  font-size: 20px;\n  background-color: rgba(255, 255, 255, 0.8); /* 背景透明度50% */\n  border: 1px solid rgba(0, 0, 0, 0.3); /* 边框稍微透明 */\n  border-radius: 5px; /* 圆角 */\n  color: #333; /* 文本颜色 */\n  width: 20%; /* 宽度可以根据需要调整 */\n  min-height: 100px; /* 设置最小高度 */\n  resize: none; /* 禁止用户调整文本框大小 */\n  overflow: auto; /* 内容溢出时显示滚动条 */\n  white-space: pre-wrap; /* 保证文本在遇到长单词或链接时自动换行 */\n}\n\nheader {\n  line-height: 1.5;\n}\n</style>\n"],"mappings":"AACA;AACA,OAAO,KAAKA,IAAG,MAAO,SAAS;AAC/B,SAAQC,WAAW,QAAO,6BAA6B;AACvDC,MAAM,CAACF,IAAG,GAAIA,IAAI,EAAE;AACpB,IAAIG,GAAG,EAAE;AACT,IAAIC,KAAK,EAAE;;AAEX,eAAe;EACf;EACEC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAAE;MAClBC,UAAU,EAAE,EAAE,CAAI;IACpB,CAAC;EACH,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IACdL,GAAE,GAAI,IAAIH,IAAI,CAACS,WAAW,CAAC;MACzBC,IAAI,EAAE,IAAI,CAACC,KAAK,CAACC,UAAU;MAAC;MAC5BC,SAAS,EAAE,IAAI;MAAa;MAC5BC,QAAQ,EAAEZ,MAAM;MAChBa,eAAe,EAAE,CAAC,CAAG;IACvB,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAX,KAAI,GAAI,MAAMH,WAAW,CAACe,IAAI,CAAC,sBAAsB,CAAC;IAEtDb,GAAG,CAACc,KAAK,CAACC,QAAQ,CAACd,KAAK,CAAC;IACzBA,KAAK,CAACe,CAAA,GAAI,GAAG;IACbf,KAAK,CAACgB,CAAA,GAAI,GAAG;IACbhB,KAAK,CAACiB,KAAK,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE;EACtB,CAAC;EACH;EACEC,aAAaA,CAAA,EAAG;IACdnB,KAAK,EAAEoB,OAAO,CAAC,CAAC;IAChBrB,GAAG,EAAEqB,OAAO,CAAC,CAAC;EAChB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAAC,IAAI,CAACpB,YAAY,CAACqB,IAAI,CAAC,CAAC,EAAE,OAAM,CAAE;;MAEvC,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,uBAAuB,EAAE;UACpDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,QAAQ,EAAE,IAAI,CAAC7B;UAAa,CAAC;QACtD,CAAC,CAAC;QAEF,MAAMD,IAAG,GAAI,MAAMuB,QAAQ,CAACQ,IAAI,CAAC,CAAC;QAElC,IAAI/B,IAAG,IAAKA,IAAI,CAACgC,KAAK,EAAE;UACtB,IAAI,CAAC9B,UAAS,GAAIF,IAAI,CAACgC,KAAK,EAAE;QAChC,OAAO;UACL,IAAI,CAAC9B,UAAS,GAAI,eAAe;QACnC;MACF,EAAE,OAAO+B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnD,IAAI,CAAC/B,UAAS,GAAI,aAAa;MACjC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}