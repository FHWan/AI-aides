{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*!\n * @pixi/extract - v6.5.10\n * Compiled Thu, 06 Jul 2023 15:25:11 UTC\n *\n * @pixi/extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MSAA_QUALITY } from '@pixi/constants';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { ExtensionType, RenderTexture } from '@pixi/core';\nvar TEMP_RECT = new Rectangle();\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\nvar Extract = /** @class */function () {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  function Extract(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Will return a HTML Image of the target\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @returns - HTML Image of the target\n   */\n  Extract.prototype.image = function (target, format, quality) {\n    var image = new Image();\n    image.src = this.base64(target, format, quality);\n    return image;\n  };\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   *  `Extract.getCanvas` and then running toDataURL on that.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @returns - A base64 encoded string of the texture.\n   */\n  Extract.prototype.base64 = function (target, format, quality) {\n    return this.canvas(target).toDataURL(format, quality);\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - A Canvas element with the texture rendered on.\n   */\n  Extract.prototype.canvas = function (target, frame) {\n    var _a = this._rawPixels(target, frame),\n      pixels = _a.pixels,\n      width = _a.width,\n      height = _a.height,\n      flipY = _a.flipY;\n    var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n    // Add the pixels to the canvas\n    var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n    Extract.arrayPostDivide(pixels, canvasData.data);\n    canvasBuffer.context.putImageData(canvasData, 0, 0);\n    // Flipping pixels\n    if (flipY) {\n      var target_1 = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n      target_1.context.scale(1, -1);\n      // We can't render to itself because we should be empty before render.\n      target_1.context.drawImage(canvasBuffer.canvas, 0, -height);\n      canvasBuffer.destroy();\n      canvasBuffer = target_1;\n    }\n    // Send the canvas back\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param frame - The frame the extraction is restricted to.\n   * @returns - One-dimensional array containing the pixel data of the entire texture\n   */\n  Extract.prototype.pixels = function (target, frame) {\n    var pixels = this._rawPixels(target, frame).pixels;\n    Extract.arrayPostDivide(pixels, pixels);\n    return pixels;\n  };\n  Extract.prototype._rawPixels = function (target, frame) {\n    var renderer = this.renderer;\n    var resolution;\n    var flipY = false;\n    var renderTexture;\n    var generated = false;\n    if (target) {\n      if (target instanceof RenderTexture) {\n        renderTexture = target;\n      } else {\n        var multisample = renderer.context.webGLVersion >= 2 ? renderer.multisample : MSAA_QUALITY.NONE;\n        renderTexture = this.renderer.generateTexture(target, {\n          multisample: multisample\n        });\n        if (multisample !== MSAA_QUALITY.NONE) {\n          // Resolve the multisampled texture to a non-multisampled texture\n          var resolvedTexture = RenderTexture.create({\n            width: renderTexture.width,\n            height: renderTexture.height\n          });\n          renderer.framebuffer.bind(renderTexture.framebuffer);\n          renderer.framebuffer.blit(resolvedTexture.framebuffer);\n          renderer.framebuffer.bind(null);\n          renderTexture.destroy(true);\n          renderTexture = resolvedTexture;\n        }\n        generated = true;\n      }\n    }\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = frame !== null && frame !== void 0 ? frame : renderTexture.frame;\n      flipY = false;\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = renderer.resolution;\n      if (!frame) {\n        frame = TEMP_RECT;\n        frame.width = renderer.width;\n        frame.height = renderer.height;\n      }\n      flipY = true;\n      renderer.renderTexture.bind(null);\n    }\n    var width = Math.round(frame.width * resolution);\n    var height = Math.round(frame.height * resolution);\n    var pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    // Read pixels to the array\n    var gl = renderer.gl;\n    gl.readPixels(Math.round(frame.x * resolution), Math.round(frame.y * resolution), width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n    return {\n      pixels: pixels,\n      width: width,\n      height: height,\n      flipY: flipY\n    };\n  };\n  /** Destroys the extract. */\n  Extract.prototype.destroy = function () {\n    this.renderer = null;\n  };\n  /**\n   * Takes premultiplied pixel data and produces regular pixel data\n   * @private\n   * @param pixels - array of pixel data\n   * @param out - output array\n   */\n  Extract.arrayPostDivide = function (pixels, out) {\n    for (var i = 0; i < pixels.length; i += 4) {\n      var alpha = out[i + 3] = pixels[i + 3];\n      if (alpha !== 0) {\n        out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n        out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n        out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n      } else {\n        out[i] = pixels[i];\n        out[i + 1] = pixels[i + 1];\n        out[i + 2] = pixels[i + 2];\n      }\n    }\n  };\n  /** @ignore */\n  Extract.extension = {\n    name: 'extract',\n    type: ExtensionType.RendererPlugin\n  };\n  return Extract;\n}();\nexport { Extract };","map":{"version":3,"names":["TEMP_RECT","Rectangle","BYTES_PER_PIXEL","Extract","renderer","prototype","image","target","format","quality","Image","src","base64","canvas","toDataURL","frame","_a","_rawPixels","pixels","width","height","flipY","canvasBuffer","CanvasRenderTarget","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","resolution","renderTexture","generated","RenderTexture","multisample","webGLVersion","MSAA_QUALITY","NONE","generateTexture","resolvedTexture","create","framebuffer","bind","blit","baseTexture","Math","round","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","out","i","length","alpha","min","extension","name","type","ExtensionType","RendererPlugin"],"sources":["../../src/Extract.ts"],"sourcesContent":["import { MSAA_QUALITY } from '@pixi/constants';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { ExtensionType, RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin, ExtensionMetadata } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * this interface is used to extract only  a single pixel of Render Texture or Display Object\n * if you use this Interface all fields is required\n * @deprecated\n * @example\n * test: PixelExtractOptions = { x: 15, y: 20, resolution: 4, width: 10, height: 10 }\n */\nexport interface PixelExtractOptions\n{\n    x: number,\n    y: number,\n    height: number,\n    resolution: number,\n    width: number\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements IRendererPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererPlugin,\n    };\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - HTML Image of the target\n     */\n    public image(target: DisplayObject | RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject | RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): HTMLCanvasElement\n    {\n        const { pixels, width, height, flipY } = this._rawPixels(target, frame);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        // Add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(pixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // Flipping pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // We can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        // Send the canvas back\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle | PixelExtractOptions): Uint8Array\n    {\n        const { pixels } = this._rawPixels(target, frame as Rectangle);\n\n        Extract.arrayPostDivide(pixels, pixels);\n\n        return pixels;\n    }\n\n    private _rawPixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): {\n        pixels: Uint8Array, width: number, height: number, flipY: boolean,\n    }\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                const multisample = renderer.context.webGLVersion >= 2 ? renderer.multisample : MSAA_QUALITY.NONE;\n\n                renderTexture = this.renderer.generateTexture(target, { multisample });\n\n                if (multisample !== MSAA_QUALITY.NONE)\n                {\n                    // Resolve the multisampled texture to a non-multisampled texture\n                    const resolvedTexture = RenderTexture.create({\n                        width: renderTexture.width,\n                        height: renderTexture.height,\n                    });\n\n                    renderer.framebuffer.bind(renderTexture.framebuffer);\n                    renderer.framebuffer.blit(resolvedTexture.framebuffer);\n                    renderer.framebuffer.bind(null);\n\n                    renderTexture.destroy(true);\n                    renderTexture = resolvedTexture;\n                }\n\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width;\n                frame.height = renderer.height;\n            }\n\n            flipY = true;\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.round(frame.width * resolution);\n        const height = Math.round(frame.height * resolution);\n\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // Read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        return { pixels, width, height, flipY };\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}